#!/usr/bin/env python3
import urllib.request
import sys
import os
import re
import getopt
import numpy as np
import argparse
from colorama import init, Fore, Back, Style
from influxdb import InfluxDBClient
import time
import datetime
init()

# command line options and help
parser = argparse.ArgumentParser()
parser.add_argument("--add", nargs='+', help="add a symbol, the quantity held and the price paid")
parser.add_argument("--delete", help="delete a symbol")
parser.add_argument("--influx", nargs='+', help="influx server, port, user and password")
parser.add_argument("--offline", help="displays last downloaded data",action="store_true")
parser.add_argument("--portfolio", help="choose a portfolio")
parser.add_argument("--read", nargs='+', help="read transactions from a csv file (google finance)")
parser.add_argument("--repeat", nargs='+', help="pull data every N minutes")
args = parser.parse_args()

if args.add:
	if len(args.add)!=3:
		print('symbol, quantity and price are required with --add')
		sys.exit(1)

if args.influx:
	if len(args.influx)!=4:
		print('The influxdb server, port #, user and password are required with --influx')
		sys.exit(1)

if args.read:
	if len(args.read)!=1:
		print('a csv filename is required with --read')
		sys.exit(1)

if args.repeat:
	if len(args.repeat)!=1:
		print('Number of Minutes is required with --repeat')
		sys.exit(1)

# set directory to user's home (should work for Linux, Mac and Windows)
os.chdir(os.path.expanduser("~"))

if args.portfolio:
	portfolio=str("." + (args.portfolio))
	if os.path.exists(portfolio)==False:
		os.mkdir(portfolio) 
	os.chdir(os.path.expanduser(portfolio))

# check if files exist for stocks and cost info
if os.path.exists('stocks.npy')==False:
	stocks={}
else:
	stocks = np.load('stocks.npy').item()

if os.path.exists('cost.npy')==False:
	cost={}
else:
	cost = np.load('cost.npy').item()

if os.path.exists('last.npy')==False:
	last={}
else:
	last = np.load('last.npy').item()

value = cost.copy()
day = cost.copy()

# function to add stock, quantity and price. checks if stock is valid on Yahoo
def inputtostocks(sym, qtn, price):
	url = "http://finance.yahoo.com/d/quotes.csv?s="+sym+"&f=n"
	try: urllib.request.urlopen(url)
	except urllib.error.URLError as e:
		print("stock not found")
		sys.exit(1)     
	f = urllib.request.urlopen(url)
	r = f.read()
	r = (r.decode("utf-8").strip())
	r = (r.replace('"','').strip())
	if (r) == 'N/A':
		print("stock not found")
		sys.exit(1)
	print(r)
	paid=int(qtn*price)
	stocks.update({sym:qtn})
	np.save('stocks.npy', stocks) 
	cost.update({sym:paid})
	np.save('cost.npy', cost)
	getprice(sym)
#	sys.exit(1)

# function to remove a stock      
def removestocks(sym):
	if sym in stocks:
		del stocks[sym]
		np.save('stocks.npy', stocks)
	if sym in cost:
		del cost[sym]
		del value[sym]
		del day[sym]
		np.save('cost.npy', cost)
	return

def getprice(symbol):
	url = "http://finance.yahoo.com/d/quotes.csv?s="+symbol+"&f=l1c1p2"
	try: 
		f = urllib.request.urlopen(url)
		r = f.read()
		r = (r.decode("utf-8").strip())
		r = (r.replace('"','').strip())
		r = re.sub(r'\s', '',r).split(',')
#		print(r)
		price=(round(float(r[0]),2))
		change=(r[1])
		percent=(r[2])
		last.update({symbol:[price,change,percent]})
#		printstock(symbol)
	except urllib.error.URLError as e:
			print('http timeout getting ' + symbol + ', showing last value')
#			printstock(symbol)
			return    

def printstock(symbol):
	if ((last[symbol][1])[0])=='-':
		col=(Fore.RED)
	else:
		col=(Fore.GREEN)	
	if (((stocks[symbol])*(float(last[symbol][0]))) -(cost[symbol])) <0:
		tcol=(Fore.RED)
	else:
		tcol=(Fore.GREEN)   
	day[symbol]=(float(last[symbol][1])*(stocks[symbol]))
	value[symbol] =((stocks[symbol])*(float(last[symbol][0])))	
	print('{:<6}'.format (symbol) + ' $' + '{:<6}'.format (last[symbol][0]),
        col + ' ' + '{:<9}'.format (last[symbol][1])  + '{:<8}'.format (last[symbol][2]) + Style.RESET_ALL, 	'value $' + '{:<8}'.format (str(round((stocks[symbol])*(float(last[symbol][0]))))), 
	'gain $' + tcol + '{:<8}'.format (str(round(((stocks[symbol])*(float(last[symbol][0]))) - (cost[symbol])))) + str(round(100*((((stocks[symbol])*(float(last[symbol][0]))) - (cost[symbol]))/(cost[symbol])),2))+'%'+ Style.RESET_ALL)
	return

# get latest change in Index (Nasdaq, DJI)
def getindex(symbol):
	url = "http://finance.yahoo.com/d/quotes.csv?s="+symbol+"&f=l1c1p2"
	tries = 1
	for i in range(tries):
		try:
			f1 = urllib.request.urlopen(url)
			r1 = f1.read()
			r1 = (r1.decode("utf-8").strip())
			r1 = (r1.replace('"','').strip())
			r1 = re.sub(r'\s', '',r1).split(',')
#			print(r1)
			if symbol == "DIA":
				price=(float(r1[0])*100)
			else:
				price=(r1[0])
			change=(r1[1])
			percent=(r1[2])
			last.update({symbol:[price,change,percent]})
			return
		except urllib.error.URLError as e:
			print('retry ' + str(i+1))
			if i < tries -1: 
				continue
			else:
				print('http timeout getting ' + symbol)
				return 

# print latest change in Index (Nasdaq, DJI)
def printindex(symbol):
	if ((last[symbol][1])[0])=='-':
		col=(Fore.RED)
	else:
		col=(Fore.GREEN)
	print('{:<6}'.format (symbol) + ' ' + '{:<8}'.format  (round(float(last[symbol][0]),2)), col + '{:<8}'.format (round(float(last[symbol][1]),2)) + ' ' + (last[symbol][2]) + Style.RESET_ALL)
	return

# formatting and printing summary
def printtotal():
	gain=sum(day.values())

	if (gain)<0:
		pgain=(Fore.RED + str(round(gain)))
	else:
		pgain=(Fore.GREEN + str(round(gain)))

	mkt=sum(value.values())
	cst=sum(cost.values())
	tgain=(round((mkt-cst)))
	pmkt=str(round(mkt))

	if (tgain)<0:
		ptgain=(Fore.RED  + str(tgain))
	else:
		ptgain=(Fore.GREEN + str(tgain))
	print()
	print('Total  $' + '{:<8}'.format (pmkt) + '{:<14}'.format (ptgain) + '{:<8}'.format (str(round((100*(mkt-cst)/cst),2)) +'%') + Style.RESET_ALL, 'Daily $' + '{:<14}'.format (pgain) + str(round((100*(gain/mkt)),2))+'%' + Style.RESET_ALL)

# call inputtostocks if --added option on command line
if args.add:
	sym=str(args.add[0])
	qtn=int(args.add[1])
	price=float(args.add[2])
	inputtostocks(sym,qtn,price)
	sys.exit(1)

# read csv file that was downloaded from google finance
if args.read:
	a=(args.read[0])
	with open(a) as file:
		next(file)
		for line in file:
			if (line[0]) == ",":
				next(file)
			else:
				currentline = line.split(",")
				if (currentline[1][0]) == '.':
					next(file)
				else:
					if (currentline[1][-1]) == '"':
						sym=str(currentline[2])
						qtn=float(currentline[5])
						price=(float(currentline[6]))/(float(currentline[5]))
					else:
						sym=str(currentline[1])
						qtn=float(currentline[4])
						price=(float(currentline[5]))/(float(currentline[4]))
			inputtostocks(sym,qtn,price)
		sys.exit(1)

# call removestocks if --delete option on command line      
if args.delete:
	sym=str(args.delete)
	removestocks(sym)
	sys.exit(1)

# polite exit if no stocks in dictionary and --added not used
if len(stocks)==0:
	print('Please input stocks with --add')
	sys.exit(1)

if args.influx:
	server=str(args.influx[0])
	port=int(args.influx[1])
	user=str(args.influx[2])
	password=str(args.influx[3])
	metric = "Stocks"
	database = "stock_quote"
	series = []
	if args.portfolio:
		database=str(args.portfolio)		
	for symbol in sorted(stocks.keys()):
		url = "http://finance.yahoo.com/d/quotes.csv?s="+symbol+"&f=l1c1p2"
		f = urllib.request.urlopen(url)
		r = f.read()
		r = (r.decode("utf-8").strip())
		r = (r.replace('"','').strip())
		r = re.sub(r'\s', '',r).split(',')
		print(symbol)
		print(r)
		s=float(r[0])
		change=(r[1])
		value = (str(round((stocks[symbol])*(s))))
		gain=(str(round(((stocks[symbol])*(s)) -(cost[symbol]))))
		pointValues = {
			"time": datetime.datetime.today(),
        	        "measurement": metric,
        	        'fields':  {
				'price': s,
				'change' : change,
				'value': value,
				'gain' : gain,
        	        },
        	        'tags': {
				"Stock": symbol,
        	        },
        	    }
		series.append(pointValues)
	client = InfluxDBClient(server, port, user, password, database)
	client.create_database(database)
	client.write_points(series)
	sys.exit(1)

# operation modes
if args.offline:
	print("Offline Mode")
	for key in sorted(stocks.keys()):
		printstock(key)
	print()
	
elif args.repeat:
	interval=(60*int(args.repeat[0]))
#	print(interval)
	print("fetching data ...")
	while True:
		for key in sorted(stocks.keys()):
			getprice(key)
		os.system('clear')		
		for key in sorted(stocks.keys()):
			printstock(key)
		getindex("DIA")
		getindex("^IXIC")
		np.save('last.npy', last)
		print()
		printindex("DIA")
		printindex("^IXIC")	
		printtotal()
#		print(time.asctime( time.localtime(time.time()) ))
		time.sleep(interval)

else:
	print("fetching data ...")
	for key in sorted(stocks.keys()):
		getprice(key)
	os.system('clear')	
	for key in sorted(stocks.keys()):
		printstock(key)
	getindex("DIA")
	getindex("^IXIC")
	np.save('last.npy', last)
	print()
	printindex("DIA")
	printindex("^IXIC")
	printtotal()
