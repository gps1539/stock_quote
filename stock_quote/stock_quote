#!/usr/bin/env python3
import urllib.request
import sys
import os
import re
import getopt
import numpy as np
import argparse
from colorama import init, Fore, Back, Style
from influxdb import InfluxDBClient
import time
import datetime
from multiprocessing.dummy import Pool
init()

# set directory to user's home (should work for Linux, Mac and Windows)
os.chdir(os.path.expanduser("~"))

# command line options and help
parser = argparse.ArgumentParser()
parser.add_argument("--add", nargs='+', help="add a symbol, the quantity held and the price paid")
parser.add_argument("--delete", nargs='+', help="delete a symbol")
#parser.add_argument("--key", nargs='+', help="add an api key, see https://www.alphavantage.co/support/#api-key")
parser.add_argument("--influx", nargs='+', help="influx server, port, user and password")
parser.add_argument("--offline", help="displays last downloaded data",action="store_true")
parser.add_argument("--portfolio", help="choose a portfolio")
parser.add_argument("--read", nargs='+', help="read transactions from a csv file (google finance)")
parser.add_argument("--repeat", nargs='+', help="pull data every N minutes")
args = parser.parse_args()

if args.add:
	if len(args.add)!=3:
		print('symbol, quantity and price are required with --add')
		sys.exit(1)

if args.delete:
	if len(args.delete)!=1:
		print('a symbol is required with --delete')
		sys.exit(1)

if args.influx:
	if len(args.influx)!=4:
		print('The influxdb server, port #, user and password are required with --influx')
		sys.exit(1)

if args.read:
	if len(args.read)!=1:
		print('a csv filename is required with --read')
		sys.exit(1)

if args.repeat:
	if len(args.repeat)!=1:
		print('Number of Minutes is required with --repeat')
		sys.exit(1)

if args.portfolio:
	portfolio=str("." + (args.portfolio))
	if os.path.exists(portfolio)==False:
		os.mkdir(portfolio) 
	os.chdir(os.path.expanduser(portfolio))

#if args.key:
#	if len(args.key)!=1:
#		print('an api key is required with --key')
#		sys.exit(1)
#	else:
#		apikey=str(args.key[0])
#		print("Testing key " + apikey)
#		url = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=1min&apikey="+apikey
#		u = urllib.request.urlopen(url)
#		k = u.read()
#		if len(k) > 1000:
#			print("passed")
#			np.save('key.npy', apikey)
#		else:
#			print("failed, please get a valid key from https://www.alphavantage.co/support/#api-key")
#		sys.exit(1)

# check if files exist for stocks and cost info
#if os.path.exists('key.npy')==False:
#	print("Please add a valid key")
#	sys.exit(1)
#else:
#	apikey = np.load('key.npy').item()

if os.path.exists('stocks.npy')==False:
	stocks={}
else:
	stocks = np.load('stocks.npy').item()

if os.path.exists('cost.npy')==False:
	cost={}
else:
	cost = np.load('cost.npy').item()

if os.path.exists('last.npy')==False:
	last={}
else:
	last = np.load('last.npy').item()

value = cost.copy()
day = cost.copy()
index = ['DJI', 'IXIC']

# function to add stock, quantity and price. checks if stock is valid on Yahoo
def inputtostocks(symbol, qtn, price):
	url = "https://api.iextrading.com/1.0/stock/"+symbol+"/quote"
	try: urllib.request.urlopen(url)
	except urllib.error.URLError as e:
		print("stock not found")
		sys.exit(1)     
	paid=int(qtn*price)
	stocks.update({symbol:qtn})
	np.save('stocks.npy', stocks) 
	cost.update({symbol:paid})
	np.save('cost.npy', cost)
	getprice(symbol)
	printstock(symbol)

# function to remove a stock      
def removestocks(sym):
	if sym in stocks:
		del stocks[sym]
		np.save('stocks.npy', stocks)
	if sym in cost:
		del cost[sym]
		del value[sym]
		del day[sym]
		np.save('cost.npy', cost)
	return

def getprice(symbol):

	# get current price
	try:
		priceurl = "https://api.iextrading.com/1.0/stock/"+symbol+"/quote"
		p = urllib.request.urlopen(priceurl)
		r = p.read()
		while len(r) < 400:
			time.sleep(1)
			p = urllib.request.urlopen(priceurl)
			r = p.read()
		r = (r.decode("utf-8").strip())
		p = r.split('"iexRealtimePrice":')[1]
		if (p.split(',')[0]) == 'null' or (p.split(',')[0]) == '0':
			p = r.split('"latestPrice":')[1]
		price = round(float(p.split(',')[0]),2)
		prev = r.split('"previousClose":')[1]
		prev = round(float(prev.split(',')[0]),2)
		change = str(round(float(price-prev),2))

		percent = (str(round(((float(price)/float(prev))-1)*100,2)))+'%'

		last.update({symbol:[price,change,percent]})

	except urllib.error.URLError as e:
		print('http timeout getting ' + symbol + ', showing last value')
		return

def printstock(symbol):
	if ((last[symbol][1])[0])=='-':
		col=(Fore.RED)
	else:
		col=(Fore.GREEN)	
	if (((stocks[symbol])*(float(last[symbol][0]))) -(cost[symbol])) <0:
		tcol=(Fore.RED)
	else:
		tcol=(Fore.GREEN)   
	day[symbol]=(float(last[symbol][1])*(stocks[symbol]))
	value[symbol] =((stocks[symbol])*(float(last[symbol][0])))	
	print('{:<6}'.format (symbol) + ' $' + '{:<6}'.format (last[symbol][0]),
        col + ' ' + '{:<9}'.format (last[symbol][1])  + '{:<8}'.format (last[symbol][2]) + Style.RESET_ALL, 	'value $' + '{:<8}'.format (str(round((stocks[symbol])*(float(last[symbol][0]))))), 
	'gain $' + tcol + '{:<8}'.format (str(round(((stocks[symbol])*(float(last[symbol][0]))) - (cost[symbol])))) + str(round(100*((((stocks[symbol])*(float(last[symbol][0]))) - (cost[symbol]))/(cost[symbol])),2))+'%'+ Style.RESET_ALL)
	return


# print latest change in Index (Nasdaq, DJI)
def printindex(symbol):
	if ((last[symbol][1])[0])=='-':
		col=(Fore.RED)
	else:
		col=(Fore.GREEN)
	print('{:<6}'.format (symbol) + ' ' + '{:<8}'.format  (round(float(last[symbol][0]),2)), col + '{:<8}'.format (round(float(last[symbol][1]),2)) + ' ' + (last[symbol][2]) + Style.RESET_ALL)
	return

# formatting and printing summary
def printtotal():
	gain=sum(day.values())

	if (gain)<0:
		pgain=(Fore.RED + str(round(gain)))
	else:
		pgain=(Fore.GREEN + str(round(gain)))

	mkt=sum(value.values())
	cst=sum(cost.values())
	tgain=(round((mkt-cst)))
	pmkt=str(round(mkt))

	if (tgain)<0:
		ptgain=(Fore.RED  + str(tgain))
	else:
		ptgain=(Fore.GREEN + str(tgain))
	print()
	print('Total  $' + '{:<8}'.format (pmkt) + '{:<14}'.format (ptgain) + '{:<8}'.format (str(round((100*(mkt-cst)/cst),2)) +'%') + Style.RESET_ALL, 'Daily $' + '{:<14}'.format (pgain) + str(round((100*(gain/mkt)),2))+'%' + Style.RESET_ALL)

# call inputtostocks if --added option on command line
if args.add:
	symbol=str(args.add[0])
	qtn=int(args.add[1])
	price=float(args.add[2])
	inputtostocks(symbol,qtn,price)
	sys.exit(1)

# read csv file that was downloaded from google finance
if args.read:
	a=(args.read[0])
	with open(a) as file:
		next(file)
		for line in file:
			if (line[0]) == ",":
				next(file)
			else:
				currentline = line.split(",")
				if (currentline[1][0]) == '.':
					next(file)
				else:
					if (currentline[1][-1]) == '"':
						sym=str(currentline[2])
						qtn=float(currentline[5])
						price=(float(currentline[6]))/(float(currentline[5]))
					else:
						sym=str(currentline[1])
						qtn=float(currentline[4])
						price=(float(currentline[5]))/(float(currentline[4]))
			inputtostocks(sym,qtn,price)
		sys.exit(1)

# call removestocks if --delete option on command line      
if args.delete:
	sym=str(args.delete[0])
	removestocks(sym)
	sys.exit(1)

# polite exit if no stocks in dictionary and --added not used
if len(stocks)==0:
	print('Please input stocks with --add')
	sys.exit(1)

# operation modes

def influx():
	server=str(args.influx[0])
	port=int(args.influx[1])
	user=str(args.influx[2])
	password=str(args.influx[3])
	metric = "Stocks"
	database = "stock_quote"
	series = []
	if args.portfolio:
		database=str(args.portfolio)		

# Call getprice to update data
	pool = Pool(len(stocks))
	pool.map(getprice, stocks.keys())

	for symbol in sorted(stocks.keys()):
		s=(float(last[symbol][0])) #current price
		change=(float(last[symbol][1]))
		value=(round(float(last[symbol][0])*(stocks[symbol]),2))
		gain=(round(value-(cost[symbol]),2))
		pointValues = {
			"time": datetime.datetime.today(),
	       	        "measurement": metric,
        	        'fields':  {
				'price': s,
				'change' : change,
				'value': value,
				'gain' : gain,
        	        },
        	        'tags': {
				"Stock": symbol,
        	        },
        	    }
		series.append(pointValues)
	client = InfluxDBClient(server, port, user, password, database)
	client.create_database(database)
	client.write_points(series)
#	sys.exit(1)

def offline():
	os.system('clear')
	print("Offline Mode")
	for key in sorted(stocks.keys()):
		printstock(key)
	print()	

def online():
	print("fetching data for " + (str(len(stocks))) + " stocks ...")
	pool = Pool(len(stocks))
	pool.map(getprice, stocks.keys())
	os.system('clear')	
	for key in sorted(stocks.keys()):
		printstock(key)
	np.save('last.npy', last)
	printtotal()

if args.repeat:
	interval=(60*int(args.repeat[0]))
	while True:
		if args.influx:
			influx()
		elif args.offline:
			offline()
		else:
			online()
		time.sleep(interval)

elif args.influx:
	influx()

elif args.offline:
	offline()
	
else:
	online()
